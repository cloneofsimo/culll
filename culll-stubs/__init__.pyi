from __future__ import annotations
import culll
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "BigTensor",
    "badd",
    "bdigit_resize",
    "bmult",
    "bnegate"
]


class BigTensor():
    def __init__(self, arg0: numpy.ndarray[numpy.uint32], arg1: int) -> None: ...
    def add_gpu(self, arg0: BigTensor) -> BigTensor: ...
    def at_index(self, arg0: int, arg1: int, arg2: int) -> typing.List[int]: ...
    def copy(self) -> BigTensor: ...
    def get_shift_amount_gpu(self) -> BigTensor: ...
    def mult_gpu(self, arg0: BigTensor) -> BigTensor: ...
    def negate_gpu(self) -> BigTensor: ...
    def negate_gpu_inplace(self) -> None: ...
    def print_slice(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> None: ...
    def redigit_gpu(self, arg0: int) -> BigTensor: ...
    def shift_gpu_inplace(self, arg0: BigTensor) -> None: ...
    def size(self) -> typing.List[int]: ...
    def write_numpy(self, arg0: numpy.ndarray[numpy.uint32]) -> None: ...
    def zero_pad_gpu(self, arg0: int) -> BigTensor: ...
    pass
def badd(arg0: numpy.ndarray[numpy.uint32], arg1: numpy.ndarray[numpy.uint32], arg2: numpy.ndarray[numpy.uint32], arg3: int, arg4: int, arg5: int) -> None:
    pass
def bdigit_resize(arg0: numpy.ndarray[numpy.uint32], arg1: numpy.ndarray[numpy.uint32], arg2: int, arg3: int) -> None:
    pass
def bmult(arg0: numpy.ndarray[numpy.uint32], arg1: numpy.ndarray[numpy.uint32], arg2: numpy.ndarray[numpy.uint32], arg3: int, arg4: int, arg5: int) -> None:
    pass
def bnegate(arg0: numpy.ndarray[numpy.uint32], arg1: int, arg2: int) -> None:
    pass
